note
	description: "Icon loader class generated by icon_code_gen"
	keywords:    "Embedded icons"
	author:      "Thomas Beale <thomas.beale@oceaninformatics.com>"
	support:     "http://www.openehr.org/issues/browse/AWB"
	copyright:   "Copyright (c) 2013- Ocean Informatics Pty Ltd"
	license:     "Apache 2.0 License <http://www.apache.org/licenses/LICENSE-2.0.html>"

class ICON_CONSOLE

inherit
	ICON_SOURCE

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			key := "console"
			make_with_size (16, 16)
			fill_memory
		end

feature {NONE} -- Image data
	
	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
				{
					#define B(q) #q
					#ifdef EIF_WINDOWS
						#define A(a,r,g,b) B(\x##b\x##g\x##r\x##a)
					#else
						#define A(a,r,g,b) B(\x##r\x##g\x##b\x##a)
					#endif

					char l_data[] =
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) 
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) 
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) 
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) 
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,B5,B4,B4) 
					A(FF,CB,CA,CA) A(FF,CB,CA,CA) A(FF,CB,CA,CA) A(FF,CB,CA,CA) A(FF,CB,CA,CA) A(FF,CB,CA,CA) A(FF,CB,CA,CA) A(FF,CB,CA,CA) A(FF,CB,CA,CA) A(FF,CB,CA,CA) 
					A(FF,CB,CA,CA) A(FF,CA,C9,C9) A(FF,89,88,88) A(00,00,00,00) A(00,00,00,00) A(FF,C8,C7,C7) A(FF,68,67,67) A(FF,66,65,65) A(FF,66,65,65) A(FF,66,65,65) 
					A(FF,66,65,65) A(FF,66,65,65) A(FF,66,65,65) A(FF,66,65,65) A(FF,66,65,65) A(FF,66,65,65) A(FF,66,65,65) A(FF,69,68,68) A(FF,C8,C7,C7) A(FF,2A,2A,2A) 
					A(00,00,00,00) A(FF,C5,C5,C5) A(FF,3E,3E,3E) A(FF,9D,9D,9D) A(FF,7B,7B,7B) A(FF,7B,7B,7B) A(FF,7B,7B,7B) A(FF,7B,7B,7B) A(FF,7B,7B,7B) A(FF,7B,7B,7B) 
					A(FF,7B,7B,7B) A(FF,7B,7B,7B) A(FF,7B,7B,7B) A(FF,3E,3E,3E) A(FF,C5,C5,C5) A(00,00,00,00) A(FF,50,50,50) A(FF,C3,C3,C3) A(FF,3A,3A,3A) A(FF,B7,B7,B7) 
					A(FF,94,94,94) A(FF,94,94,94) A(FF,70,70,70) A(FF,70,70,70) A(FF,70,70,70) A(FF,70,70,70) A(FF,70,70,70) A(FF,70,70,70) A(FF,70,70,70) A(FF,3A,3A,3A) 
					A(FF,C2,C1,C1) A(00,00,00,00) A(FF,4C,4C,4C) A(FF,C1,C0,C0) A(FF,36,36,36) A(FF,60,60,60) A(FF,60,60,60) A(FF,60,60,60) A(FF,60,60,60) A(FF,61,61,61) 
					A(FF,61,61,61) A(FF,60,60,60) A(FF,60,60,60) A(FF,60,60,60) A(FF,60,60,60) A(FF,36,36,36) A(FF,BF,BE,BE) A(00,00,00,00) A(FF,4C,4C,4C) A(FF,BC,BC,BC) 
					A(FF,31,31,31) A(FF,52,52,52) A(FF,52,52,52) A(FF,52,52,52) A(FF,52,52,52) A(FF,52,52,52) A(FF,52,52,52) A(FF,52,52,52) A(FF,52,52,52) A(FF,52,52,52) 
					A(FF,52,52,52) A(FF,31,31,31) A(FF,B9,B9,B9) A(00,00,00,00) A(FF,48,48,48) A(FF,B8,B8,B8) A(FF,26,26,26) A(FF,35,35,35) A(FF,35,35,35) A(FF,35,35,36) 
					A(FF,36,36,36) A(FF,37,37,37) A(FF,37,37,37) A(FF,36,36,36) A(FF,36,36,36) A(FF,35,35,36) A(FF,35,35,35) A(FF,26,26,26) A(FF,B3,B3,B3) A(00,00,00,00) 
					A(FF,46,43,43) A(FF,B6,B5,B5) A(FF,21,22,22) A(FF,26,26,26) A(FF,27,27,27) A(FF,29,29,29) A(FF,2A,2B,2B) A(FF,2B,2C,2C) A(FF,2B,2C,2C) A(FF,2A,2B,2B) 
					A(FF,29,29,29) A(FF,28,28,28) A(FF,26,27,27) A(FF,22,22,22) A(FF,AF,AE,AE) A(00,00,00,00) A(FF,42,42,42) A(FF,B3,B2,B2) A(FF,28,28,29) A(FF,2F,2F,2F) 
					A(FF,31,31,31) A(FF,33,33,34) A(FF,35,35,35) A(FF,36,36,37) A(FF,36,36,37) A(FF,35,35,36) A(FF,33,33,34) A(FF,31,31,32) A(FF,2F,2F,2F) A(FF,29,29,29) 
					A(FF,AB,AB,AB) A(00,00,00,00) A(FF,40,40,40) A(FF,AF,AF,AF) A(FF,2F,2F,30) A(FF,36,36,38) A(FF,39,39,3B) A(FF,3C,3C,3D) A(FF,3F,3F,40) A(FF,41,41,42) 
					A(FF,41,41,42) A(FF,3F,3F,40) A(FF,3D,3D,3E) A(FF,3A,3A,3B) A(FF,37,37,38) A(FF,2F,2F,30) A(FF,A6,A6,A6) A(00,00,00,00) A(FF,3D,3D,3D) A(FF,AB,AB,AB) 
					A(FF,34,35,35) A(FF,3D,3D,3D) A(FF,41,41,41) A(FF,44,45,45) A(FF,47,48,48) A(FF,49,4A,4A) A(FF,49,4A,4A) A(FF,48,48,48) A(FF,45,45,45) A(FF,41,42,42) 
					A(FF,3E,3E,3E) A(FF,35,36,36) A(FF,A1,A1,A1) A(00,00,00,00) A(FF,39,39,39) A(FF,AB,AB,AB) A(FF,B3,B3,B3) A(FF,B3,B3,B3) A(FF,B3,B3,B3) A(FF,B3,B3,B3) 
					A(FF,B3,B3,B3) A(FF,B3,B3,B3) A(FF,B3,B3,B3) A(FF,B3,B3,B3) A(FF,B3,B3,B3) A(FF,B3,B3,B3) A(FF,B3,B3,B3) A(FF,B6,B6,B6) A(FF,9E,9E,9E) A(00,00,00,00) 
					A(FF,00,00,00) A(FF,36,36,36) A(FF,3A,3A,3A) A(FF,3A,3A,3A) A(FF,3A,3A,3A) A(FF,3A,3A,3A) A(FF,3A,3A,3A) A(FF,3A,3A,3A) A(FF,3A,3A,3A) A(FF,3A,3A,3A) 
					A(FF,3A,3A,3A) A(FF,3A,3A,3A) A(FF,3A,3A,3A) A(FF,3A,3A,3A) A(FF,33,33,33) A(FF,00,00,00) ;
					memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
				}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'
		do
			c_colors_0 (a_ptr, 0)
		end

end