note
	description: "Icon loader class generated by icon_code_gen"
	keywords:    "Embedded icons"
	author:      "Thomas Beale <thomas.beale@oceaninformatics.com>"
	support:     "http://www.openehr.org/issues/browse/AWB"
	copyright:   "Copyright (c) 2013- Ocean Informatics Pty Ltd"
	license:     "Apache 2.0 License <http://www.apache.org/licenses/LICENSE-2.0.html>"

class ICON_EDIT_INACTIVE

inherit
	ICON_SOURCE

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			key := "edit_inactive"
			make_with_size (16, 16)
			fill_memory
		end

feature {NONE} -- Image data
	
	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
				{
					#define B(q) #q
					#ifdef EIF_WINDOWS
						#define A(a,r,g,b) B(\x##b\x##g\x##r\x##a)
					#else
						#define A(a,r,g,b) B(\x##r\x##g\x##b\x##a)
					#endif

					char l_data[] =
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) 
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,3F,3F,3F) A(FF,D6,D6,D6) A(FF,E8,E8,E8) 
					A(FF,E8,E8,E8) A(FF,E8,E8,E8) A(FF,E8,E8,E8) A(FF,E8,E8,E8) A(FF,E5,E5,E5) A(FF,AA,AA,AA) A(FF,3F,3F,3F) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) 
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,3F,3F,3F) A(FF,E1,E1,E1) A(FF,F3,F3,F3) A(FF,F3,F3,F3) A(FF,F3,F3,F3) A(FF,F3,F3,F3) A(FF,F1,F1,F1) 
					A(FF,DF,DF,DF) A(FF,C8,C8,C8) A(FF,AE,AE,AE) A(FF,3F,3F,3F) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,3F,3F,3F) 
					A(FF,E1,E1,E1) A(FF,F2,F2,F2) A(FF,F2,F2,F2) A(FF,F2,F2,F2) A(FF,F2,F2,F2) A(FF,F1,F1,F1) A(FF,E3,E3,E3) A(FF,BD,BD,BD) A(FF,FB,FB,FB) A(FF,AE,AE,AE) 
					A(FF,3F,3F,3F) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,3F,3F,3F) A(FF,E1,E1,E1) A(FF,E0,E0,E0) A(FF,D4,D4,D4) A(FF,D1,D1,D1) 
					A(FF,DB,DB,DB) A(FF,E0,E0,E0) A(FF,E5,E5,E5) A(FF,B9,B9,B9) A(FF,AC,AC,AC) A(FF,AE,AE,AE) A(FF,88,88,88) A(FF,45,45,45) A(FF,52,52,52) A(00,00,00,00) 
					A(00,00,00,00) A(FF,3F,3F,3F) A(FF,E1,E1,E1) A(FF,DF,DF,DF) A(FF,DC,DC,DC) A(FF,DC,DC,DC) A(FF,CF,CF,CF) A(FF,DF,DF,DF) A(FF,E7,E7,E7) A(FF,D3,D3,D3) 
					A(FF,C8,C8,C8) A(FF,C1,C1,C1) A(FF,B6,B6,B6) A(FF,AF,AF,AF) A(FF,5F,5F,5F) A(FF,3F,3F,3F) A(00,00,00,00) A(FF,3F,3F,3F) A(FF,E1,E1,E1) A(FF,DE,DE,DE) 
					A(FF,D7,D7,D7) A(FF,D3,D3,D3) A(FF,CE,CE,CE) A(FF,E2,E2,E2) A(FF,CB,CB,CB) A(FF,CE,CE,CE) A(FF,CC,CC,CC) A(FF,DA,DA,DA) A(FF,EF,EF,EF) A(FF,8B,8B,8B) 
					A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(00,00,00,00) A(FF,3F,3F,3F) A(FF,E1,E1,E1) A(FF,DD,DD,DD) A(FF,D1,D1,D1) A(FF,DA,DA,DA) A(FF,CC,CC,CC) A(FF,D9,D9,D9) 
					A(FF,CC,CC,CC) A(FF,DE,DE,DE) A(FF,D5,D5,D5) A(FF,C2,C2,C2) A(FF,8C,8C,8C) A(FF,44,44,44) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(00,00,00,00) A(FF,3F,3F,3F) 
					A(FF,E0,E0,E0) A(FF,DC,DC,DC) A(FF,CB,CB,CB) A(FF,DA,DA,DA) A(FF,CB,CB,CB) A(FF,CB,CB,CB) A(FF,E2,E2,E2) A(FF,D2,D2,D2) A(FF,C2,C2,C2) A(FF,87,87,87) 
					A(FF,73,73,73) A(FF,8E,8E,8E) A(FF,3F,3F,3F) A(00,00,00,00) A(00,00,00,00) A(FF,3F,3F,3F) A(FF,E0,E0,E0) A(FF,DA,DA,DA) A(FF,DB,DB,DB) A(FF,CA,CA,CA) 
					A(FF,DF,DF,DF) A(FF,CB,CB,CB) A(FF,D7,D7,D7) A(FF,C3,C3,C3) A(FF,8C,8C,8C) A(FF,62,62,62) A(FF,B9,B9,B9) A(FF,9C,9C,9C) A(FF,3F,3F,3F) A(00,00,00,00) 
					A(00,00,00,00) A(FF,3F,3F,3F) A(FF,E0,E0,E0) A(FF,D9,D9,D9) A(FF,D5,D5,D5) A(FF,CB,CB,CB) A(FF,C9,C9,C9) A(FF,D8,D8,D8) A(FF,C2,C2,C2) A(FF,8F,8F,8F) 
					A(FF,5F,5F,5F) A(FF,9B,9B,9B) A(FF,D9,D9,D9) A(FF,A2,A2,A2) A(FF,3F,3F,3F) A(00,00,00,00) A(00,00,00,00) A(FF,3F,3F,3F) A(FF,E0,E0,E0) A(FF,E8,E8,E8) 
					A(FF,E8,E8,E8) A(FF,E8,E8,E8) A(FF,E1,E1,E1) A(FF,C2,C2,C2) A(FF,94,94,94) A(FF,65,65,65) A(FF,A1,A1,A1) A(FF,DA,DA,DA) A(FF,E9,E9,E9) A(FF,A2,A2,A2) 
					A(FF,3F,3F,3F) A(00,00,00,00) A(00,00,00,00) A(FF,3F,3F,3F) A(FF,E0,E0,E0) A(FF,E7,E7,E7) A(FF,E7,E7,E7) A(FF,DF,DF,DF) A(FF,C2,C2,C2) A(FF,97,97,97) 
					A(FF,66,66,66) A(FF,95,95,95) A(FF,D4,D4,D4) A(FF,E7,E7,E7) A(FF,E8,E8,E8) A(FF,A2,A2,A2) A(FF,3F,3F,3F) A(00,00,00,00) A(00,00,00,00) A(FF,3F,3F,3F) 
					A(FF,DB,DB,DB) A(FF,EA,EA,EA) A(FF,EA,EA,EA) A(FF,C7,C7,C7) A(FF,A2,A2,A2) A(FF,69,69,69) A(FF,90,90,90) A(FF,D3,D3,D3) A(FF,E9,E9,E9) A(FF,EA,EA,EA) 
					A(FF,EC,EC,EC) A(FF,A3,A3,A3) A(FF,3F,3F,3F) A(00,00,00,00) A(00,00,00,00) A(FF,3F,3F,3F) A(FF,8E,8E,8E) A(FF,87,87,87) A(FF,94,94,94) A(FF,99,99,99) 
					A(FF,60,60,60) A(FF,49,49,49) A(FF,71,71,71) A(FF,86,86,86) A(FF,87,87,87) A(FF,87,87,87) A(FF,88,88,88) A(FF,53,53,53) A(FF,3F,3F,3F) A(00,00,00,00) 
					A(00,00,00,00) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) 
					A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(FF,3F,3F,3F) A(00,00,00,00) ;
					memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
				}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'
		do
			c_colors_0 (a_ptr, 0)
		end

end